// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.2 effective-5.10 (swiftlang-6.0.2.1.2 clang-1600.0.26.4)
// swift-module-flags: -target arm64-apple-ios15.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name Smartsupp
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import Combine
import CommonCrypto
import DeveloperToolsSupport
import Dispatch
import Foundation
import Intents
import Network
@_exported import Smartsupp
import Swift
import SwiftUI
import UIKit
import UserNotifications
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os
import zlib
public enum SmartsuppLanguage : Swift.String, Swift.CaseIterable {
  case `default`
  case ar
  case az
  case bg
  case bs
  case ca
  case cn
  case cs
  case da
  case de
  case el
  case en
  case es
  case fa
  case fi
  case fil
  case fr
  case hr
  case hu
  case it
  case ka
  case lv
  case lt
  case nl
  case no
  case pl
  case pt
  case ro
  case ru
  case sk
  case sl
  case sr
  case sv
  case tr
  case uk
  public init?(rawValue: Swift.String)
  public typealias AllCases = [Smartsupp.SmartsuppLanguage]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [Smartsupp.SmartsuppLanguage] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public protocol SmartsuppStateDelegate : AnyObject {
  func smartsuppState(unreadMessages: Swift.Int)
  func smartsuppState(status: Smartsupp.AccountStatus)
  func smartsuppState(userIsBlocked: Swift.Bool)
}
extension Smartsupp.SmartsuppStateDelegate {
  public func smartsuppState(unreadMessages: Swift.Int)
  public func smartsuppState(status: Smartsupp.AccountStatus)
  public func smartsuppState(userIsBlocked: Swift.Bool)
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func smartsupp() -> some SwiftUICore.View
  
}
public struct SmartsuppOptions {
  public init(apiKey: Swift.String, accountKey: Swift.String)
}
@objc @_inheritsConvenienceInitializers open class SmartsuppNotificationServiceExtension : UserNotifications.UNNotificationServiceExtension {
  @objc override dynamic open func didReceive(_ request: UserNotifications.UNNotificationRequest, withContentHandler contentHandler: @escaping (UserNotifications.UNNotificationContent) -> Swift.Void)
  @objc override dynamic open func serviceExtensionTimeWillExpire()
  @objc override dynamic public init()
  @objc deinit
}
@frozen public enum SmartsuppShowResult {
  case success
  case error(any Swift.Error)
}
@_hasMissingDesignatedInitializers public class MulticastDelegate<T> {
  public func add(_ delegate: T)
  public func remove(_ delegate: T)
  public func invoke(_ invocation: (T) -> Swift.Void)
  public var isEmpty: Swift.Bool {
    get
  }
  @objc deinit
}
#warning("Document code")
#warning("Tests")
#warning("Support for Mac Catalyst")
#warning("Support for iOS 14.0")
#warning("Move Starscream.xcframework to the Dependencies folder")
#warning("Download custom branch of SocketIO library with all public and open declarations removed")
#warning("Move SocketIO Source to the Dependencies folder")
@_hasMissingDesignatedInitializers public class Smartsupp {
  public typealias ShowCallback = (Smartsupp.SmartsuppShowResult) -> Swift.Void
  public static var shared: Smartsupp.Smartsupp {
    get
  }
  final public let state: Smartsupp.SmartsuppState
  public static func setup(withOptions options: Smartsupp.SmartsuppOptions)
  public static func identifyUser(name: Swift.String? = nil, email: Swift.String? = nil, phone: Swift.String? = nil, variables: [Swift.String : Swift.String]? = nil)
  public static func setChatboxLanguage(_ language: Smartsupp.SmartsuppLanguage)
  public static func setChatboxLanguage(_ language: Swift.String)
  public static func openChatBox(completionHandler: @escaping Smartsupp.Smartsupp.ShowCallback)
  public static func openChatBox(from viewController: UIKit.UIViewController, completionHandler: @escaping Smartsupp.Smartsupp.ShowCallback)
  public static func resetUser(completionHandler: @escaping () -> Swift.Void)
  @objc deinit
}
extension Smartsupp.Smartsupp {
  public static func updateDeviceToken(_ token: Foundation.Data)
  public static func presentationOptions(forNotification notification: UserNotifications.UNNotification) -> UserNotifications.UNNotificationPresentationOptions?
  public static func handleNotification(_ notification: UserNotifications.UNNotification) -> Swift.Bool
}
public class SmartsuppNotificationContentManager {
  public init?(_ request: UserNotifications.UNNotificationRequest, withContentHandler contentHandler: @escaping (UserNotifications.UNNotificationContent) -> Swift.Void)
  public func serviceExtensionTimeWillExpire()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SmartsuppState {
  public var unreadMessages: Swift.Int {
    get
  }
  public var status: Smartsupp.AccountStatus {
    get
  }
  public var userIsBlocked: Swift.Bool {
    get
  }
  final public let delegate: Smartsupp.MulticastDelegate<any Smartsupp.SmartsuppStateDelegate>
  public static var `default`: Smartsupp.SmartsuppState {
    get
  }
  @objc deinit
}
public enum AccountStatus : Swift.String, Swift.Decodable {
  case offline
  case online
  public var isOnline: Swift.Bool {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension Smartsupp.SmartsuppLanguage : Swift.Equatable {}
extension Smartsupp.SmartsuppLanguage : Swift.Hashable {}
extension Smartsupp.SmartsuppLanguage : Swift.RawRepresentable {}
extension Smartsupp.SmartsuppShowResult : Swift.Sendable {}
extension Smartsupp.AccountStatus : Swift.Equatable {}
extension Smartsupp.AccountStatus : Swift.Hashable {}
extension Smartsupp.AccountStatus : Swift.RawRepresentable {}
